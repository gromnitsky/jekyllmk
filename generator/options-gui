#!/bin/sh
# -*-tcl-*- \
# the next line restarts using wish \
exec wish "$0" -name jekyllmk_generator ${1+"$@"}

array set gui {
    title "Byron B. Buffington II's Blog"
    license "Creative Commons Attribution-NoDerivs 3.0"
    calendar_treesort "descending"

    feed_baseurl "http://example.com/blog"
    feed_author {Byron "The Buffer" Buffington}

    avatar 1
    about_page 1
    header 0
    footer 1
    css_example 0
}

set gui(dir) [expr {[llength $argv] ? [lindex $argv 0] : [pwd]}]; # Tcl is ugly

set MN 0.3c;			# a margin in centimeters

array set conf {}
set conf(help) "
After pressing <Return> the dialog spits to stdout a configuration
based on your preferences. The jekyllmk-new tool picks it up & generates
required files for jekyllmk engine. You can always tweak the configuration
later on by editing config.json & local.* files directly.

Pressing <Esc> aborts the whole process.
"

proc help_text {} {
    global conf
    return [string trim [regsub -all -- {(\S)\n(\S)} $conf(help) {\1 \2}]]
}

proc script_dir {} {
    set r [info script]
    if {![catch {file link $r} symlink]} {
	set r [file join [file dirname $r] $symlink]
    }
    return [file dirname [file normalize $r]]
}

proc table_row {parent wname text var} {
    global MN
    ttk::label $parent.${wname}_label -text $text
    ttk::entry $parent.$wname -textvariable gui($var) -width 40
    grid $parent.${wname}_label $parent.$wname -padx $MN -pady "$MN 0"
    grid $parent.${wname}_label -sticky e
    grid $parent.$wname -sticky ew
}

proc json_escape {val} {
    return \"[string map [list "\"" "\\\"" \\ \\\\ \b \\b \f \\f \n \\n \r \\r \t \\t] $val]\"
}

proc ok {} {
    global gui

    set r [list]
    foreach key [array names gui] {
	lappend r "[json_escape $key]: [json_escape $gui($key)]"
    }
    puts \{[join $r ",\n"]\}
    exit 0
}


wm title . "jekyllmk generator :: new site"
wm protocol . WM_DELETE_WINDOW {exit 1}
bind . <Escape> {exit 1}
if {[tk windowingsystem] == "x11"} {
    # force all fonts to have a platform-dependent default size
    # according to the DPI
    foreach idx [font names] { font configure $idx -size 0 }
}

# Main
ttk::frame .main

set pic [image create photo -file [file join [script_dir] red-stapler.png]]
ttk::frame .main.info
ttk::label .main.info.pic -image $pic
ttk::label .main.info.label -text [help_text] -wraplength [image width $pic]
pack .main.info.pic .main.info.label -in .main.info -fill both -pady "0 $MN"

ttk::frame .main.opts
grid .main.info .main.opts -in .main
grid .main.info -padx "$MN 0" -pady $MN -sticky n
grid .main.opts -sticky nesw
grid columnconfigure .main 1 -weight 1
pack .main -fill x


# Meta
ttk::labelframe .meta -text "Meta" -padding "0 0 0 $MN"

ttk::label .meta.dir_label -text "Directory:"
ttk::entry .meta.dir -textvariable gui(dir) -state readonly -takefocus 0 \
    -font TkFixedFont
grid .meta.dir_label .meta.dir -sticky e -padx $MN -pady "$MN 0"
grid .meta.dir -sticky ew

table_row .meta title "Site title:" title
table_row .meta license "License:" license

ttk::label .meta.sort_label -text "Calendar sort order:"
ttk::frame .meta.sort_radiobutton_frame
ttk::radiobutton .meta.sort_ascending -text "ascending" \
    -variable gui(calendar_treesort) -value ascending
ttk::radiobutton .meta.sort_descending -text "descending" \
    -variable gui(calendar_treesort) -value descending
pack .meta.sort_ascending .meta.sort_descending \
    -in .meta.sort_radiobutton_frame -side left -padx "0 $MN"
grid .meta.sort_label .meta.sort_radiobutton_frame -padx $MN -pady "$MN 0"
grid .meta.sort_label -sticky e
grid .meta.sort_radiobutton_frame -sticky w

grid columnconfigure .meta 1 -weight 1
pack .meta -fill x -padx $MN -pady "$MN 0" -in .main.opts


# Visual Components
ttk::labelframe .comp -text "Visual Components" -padding "0 0 0 $MN"
ttk::checkbutton .comp.avatar -text "Avatar" -variable gui(avatar)
ttk::checkbutton .comp.about_page -text "About page" -variable gui(about_page)
ttk::checkbutton .comp.header -text "Custom header" -variable gui(header)
ttk::checkbutton .comp.footer -text "Custom footer" -variable gui(footer)
ttk::checkbutton .comp.css_example -text "Local CSS example" \
    -variable gui(css_example)

grid .comp.avatar .comp.about_page  -padx $MN -pady "$MN 0"  -sticky w
grid .comp.header .comp.footer .comp.css_example \
    -padx $MN -pady "$MN 0" -sticky w
pack .comp -fill x -padx $MN -pady "$MN 0"  -in .main.opts


# Atom feed
ttk::labelframe .feed -text "Atom feed" -padding "0 0 0 $MN"
table_row .feed baseurl "Base URL:" feed_baseurl
.feed.baseurl configure -font TkFixedFont
table_row .feed author "Author:" feed_author
grid columnconfigure .feed 1 -weight 1

pack .feed -fill x -padx $MN -pady $MN  -in .main.opts


# Separator
ttk::separator .sep
pack .sep -fill x


# Buttons
frame .buttons
ttk::button .buttons.cancel -text "Cancel" -command {exit 1}
ttk::button .buttons.ok -text "OK" -command ok -default active
bind . <Return> [list .buttons.ok invoke]
focus .buttons.ok

pack .buttons.cancel .buttons.ok -side left -padx "$MN 0"
pack .buttons -padx $MN -pady $MN -side right -anchor se

raise .;    # w/o this Windows 10 doesn't give us the focus on startup
