#!/usr/bin/env node

'use strict'

let fs = require('fs')
let argv = require('minimist')(process.argv.slice(2))

let post = require('./lib/post')

let md_parse = function(file, idx, cal) {
    return new Promise( (resolve, reject) => {
	fs.readFile(file, 'utf8', (err, data) => {
	    if (err) {
		reject(err)
		return
	    }
	    let r = post.parse(data)
	    resolve({
		cal: cal,
		idx: idx,
		subject: r.subject,
		authors: r.authors,
		tags: r.tags
	    })
	})
    })
}


if (!argv._.length) {
    console.error("Usage: index YYYY/DD/MM/1.md ...")
    process.exit(1)
}

let index = {
    "posts": [],
    "authors": [],
    "tags": [],
    "pages": []
}
let parsed = {
    promises: [],
    posts_files_ignored: 0,
    pages_files_ignored: 0
}
let files = argv._.sort()

files.forEach( (file, idx) => {
    // posts
    let m = file.match(/(\d{4})\/(\d{2})\/(\d{2})\/(.+).md$/)
    if (!m) {
	parsed.posts_files_ignored++
    } else {
	if (argv.v) console.error(`post: ${file}`)
	let promise = md_parse(file, idx - parsed.posts_files_ignored, m)
	    .then( (meta) => {
		meta.authors.forEach( (ar) => {
		    if (-1 === index.authors.indexOf(ar))
			index.authors.push(ar)
		})
		meta.tags.forEach( (at) => {
		    if (-1 === index.tags.indexOf(at))
			index.tags.push(at)
		})

		index.posts[meta.idx] = {
		    n: meta.cal[4],
		    y: meta.cal[1],
		    m: meta.cal[2],
		    d: meta.cal[3],
		    s: meta.subject,
		    a: meta.authors.map( (name) => {
			return index.authors.indexOf(name)
		    }),
		    t: meta.tags.map( (name) => {
			return index.tags.indexOf(name)
		    })
		}
	    })
	    .catch((err) => {
		console.error(err.message)
		process.exit(1)
	    })

	parsed.promises.push(promise)
    }

    // pages
    m = file.match(/p\/(.+)\.md$/)
    if (!m) {
	parsed.pages_files_ignored++
    } else {
	if (argv.v) console.error(`page: ${file}`)
	let promise = md_parse(file, idx - parsed.pages_files_ignored, m)
	    .then( (meta) => {
		index.pages[meta.idx] = {
		    n: meta.cal[1],
		    s: meta.subject,
		}
	    })
	    .catch((err) => {
		console.error(err.message)
		process.exit(1)
	    })

	parsed.promises.push(promise)
    }
})

Promise.all(parsed.promises).then( ()=> {
    process.stdout.write(JSON.stringify(index))
})
